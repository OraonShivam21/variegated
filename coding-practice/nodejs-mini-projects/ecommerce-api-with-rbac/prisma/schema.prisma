generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_DATABASE_URI")
}

model User {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    email       String          @unique
    password    String
    roleId      String          @db.ObjectId
    address     Address
    createdAt   DateTime        @default(now())

    role        Role            @relation(fields: [roleId], references: [id])
    orders      Order[]
    reviews     Review[]
    cart        Cart?
}

model Role {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    name        String          @unique
    permissions String[]
    users       User[]
}

type Address {
    street      String
    city        String
    state       String
    country     String
    zip         String
}

model Product {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    price       Float
    categoryId  String          @db.ObjectId
    stock       Int
    images      String[]
    createdAt   DateTime        @default(now())

    category    Category        @relation(fields: [categoryId], references: [id])
    reviews     Review[]
    items       Item[]
}

model Category {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    createdAt   DateTime        @default(now())

    products    Product[]
}

model Order {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    userId      String          @db.ObjectId
    items       Item[]
    amount      Float
    status      OrderStatus     @default(PENDING)
    address     Address
    createdAt   DateTime        @default(now())

    user        User            @relation(fields: [userId], references: [id])
}

model Item {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    orderId     String?         @db.ObjectId
    cartId      String?         @db.ObjectId
    productId   String          @db.ObjectId
    quantity    Int
    price       Float

    order       Order?          @relation(fields: [orderId], references: [id])
    cart        Cart?           @relation(fields: [cartId], references: [id])
    product     Product         @relation(fields: [productId], references: [id])
}

enum OrderStatus {
    PENDING
    SHIPPED
    DELIVERED
    CANCELLED
}

model Cart {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    userId      String          @db.ObjectId @unique
    items       Item[]
    createdAt   DateTime        @default(now())

    user        User            @relation(fields: [userId], references: [id])
}

model Review {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    userId      String          @db.ObjectId
    productId   String          @db.ObjectId
    rating      Int
    comment     String?
    createdAt   DateTime        @default(now())

    user        User            @relation(fields: [userId], references: [id])
    product     Product         @relation(fields: [productId], references: [id])
}
